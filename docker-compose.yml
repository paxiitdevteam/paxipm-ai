# Docker Compose for PaxiPM AI - Synology NAS Deployment
version: '3.8'

services:
  # MariaDB Database
  database:
    image: mariadb:10.11
    container_name: paxipm-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-paxipm_root_password}
      MYSQL_DATABASE: ${DB_NAME:-paxipm}
      MYSQL_USER: ${DB_USER:-paxipm_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-paxipm_password}
    volumes:
      - db_data:/var/lib/mysql
      - ./backend/db/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paxipm-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: paxipm-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: database
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-paxipm}
      DB_USER: ${DB_USER:-paxipm_user}
      DB_PASSWORD: ${DB_PASSWORD:-paxipm_password}
      JWT_SECRET: ${JWT_SECRET:-change_this_in_production}
      AI_ENGINE_URL: http://ai-engine:8000
      USE_SQLITE: "false"
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
      ai-engine:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - paxipm-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Engine (FastAPI)
  ai-engine:
    build:
      context: ./ai_engine
      dockerfile: Dockerfile
    container_name: paxipm-ai-engine
    restart: unless-stopped
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key_here}
      PORT: 8000
    ports:
      - "8000:8000"
    volumes:
      - ./ai_engine:/app
      - /app/__pycache__
    networks:
      - paxipm-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: paxipm-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - paxipm-network

volumes:
  db_data:
    driver: local

networks:
  paxipm-network:
    driver: bridge

